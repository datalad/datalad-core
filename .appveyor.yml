# This CI setup provides a largely homogeneous configuration across all
# major platforms (Windows, MacOS, and Linux). The aim of this test setup is
# to create a "native" platform experience, using as few cross-platform
# helper tools as possible.
#
# On all platforms `hatch` is used for testing, and managing the test
# environment. This yields a near-identical environment/behavior across
# platforms and Python versions. The main difference between running tests
# on Appveyor and locally should be the service setup (e.g., SSH, HTTPBIN).
#
# All workers support remote login (grep for LOGIN in this file to locate
# the lines that enable it). Once enabled, login details are shown at the
# top of each CI run log.
#
# - Linux/Mac workers (via SSH):
#
#   - A permitted SSH key must be defined in an APPVEYOR_SSH_KEY environment
#     variable (via the appveyor project settings)
#
#   - SSH login info is given in the form of: 'appveyor@67.225.164.xx -p 22xxx'
#
#   - Login with:
#
#     ssh -o StrictHostKeyChecking=no <LOGIN>
#
#   - to prevent the CI run from exiting, `touch` a file named `BLOCK` in the
#     user HOME directory (current directory directly after login). The session
#     will run until the file is removed (or 60 min have passed)
#
# - Windows workers (via RDP):
#
#   - An RDP password should be defined in an APPVEYOR_RDP_PASSWORD environment
#     variable (via the appveyor project settings), or a random password is used
#     every time
#
#   - RDP login info is given in the form of IP:PORT
#
#   - Login with:
#
#     xfreerdp /cert:ignore /dynamic-resolution /u:appveyor /p:<PASSWORD> /v:<LOGIN>
#
#   - to prevent the CI run from exiting, create a textfile named `BLOCK` on the
#     Desktop (a required .txt extension will be added automatically). The session
#     will run until the file is removed (or 60 min have passed)
#

# do not make repository clone cheap: interfers with VCS-based version determination
shallow_clone: false

# turn of support for MS project build support (not needed)
build: off

environment:
  # place coverage files to a known location regardless of where a test run
  # is happening. also ensures proper report path configurations for codecov
  COVERAGE_ROOT: /home/appveyor/DLTMP
  # we pin hatch's data file to make it easy to cache it
  HATCH_DATA_DIR: /home/appveyor/hatch-data-dir
  UV_CACHE_DIR: /home/appveyor/.cache/uv
  HATCH_ENV_TYPE_VIRTUAL_UV_PATH: /home/appveyor/.local/bin/uv
  # oldest and newest supported, by default
  TEST_SCRIPT: "hatch test -i py=3.9,3.13 --cover --doctest-modules --durations 10"
  matrix:
    - job_name: test-linux
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2204

    # same as 'test-linux', but TMPDIR is on a crippled filesystem, causing
    # most, if not all test datasets to be created on that filesystem
    - job_name: test-linux-crippled
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2204

    - job_name: test-mac
      APPVEYOR_BUILD_WORKER_IMAGE: macos-sonoma
      COVERAGE_ROOT: /Users/appveyor/DLTMP
      HATCH_DATA_DIR: /Users/appveyor/hatch-data-dir
      HATCH_ENV_TYPE_VIRTUAL_UV_PATH: /Users/appveyor/.local/bin/uv
      UV_CACHE_DIR: /Users/appveyor/.cache/uv

    - job_name: test-win
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
      COVERAGE_ROOT: C:\DLTMP
      # Python version specification is non-standard on windows
      HATCH_DATA_DIR: C:\hatch-data-dir
      # make hatch use uv as an installer
      HATCH_ENV_TYPE_VIRTUAL_UV_PATH: C:\Users\appveyor\.local\bin\uv.exe
      # appveyor has a default path that comprises _everything_. here we trim
      # it to the bare necessities to reduce using preinstalled software
      # that changes without notice. importantly, we
      # - reset the default python to be a 64bit one
      # - include the installation target path for `uv`
      CUSTOMPATH: C:\Users\\appveyor\.local\bin;C:\Program Files\Git\cmd;C:\Program Files\Git\usr\bin;C:\Windows\system32;C:\Windows\System32\WindowsPowerShell\v1.0;C:\Windows\System32\OpenSSH;C:\Program Files\PowerShell\7;C:\Program Files\7-Zip;C:\Python312-x64;C:\Python312-x64\Scripts"
      UV_CACHE_DIR: C:\Users\appveyor\AppData\Local\uv\cache


# only run the CI if there are code or tooling changes
only_commits:
  files:
    - datalad_core/**/*
    - tools/**/*
    - pyproject.toml
    - .appveyor.yml

# job-specific configurations
for:
  #
  # POSIX TEST RUNS
  #
  - matrix:
      only:
        - job_name: test-linux
        - job_name: test-linux-crippled
        - job_name: test-mac

    cache:
      - "${UV_CACHE_DIR} -> .appveyor.yml"

    # init cannot use any components from the repo, because it runs prior to
    # cloning it
    init:
      # LOGIN: enable external SSH access to CI worker
      # needs APPVEYOR_SSH_KEY defined in project settings (or environment)
      #- curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
      # wipe out appveyor's collection of environment shims to prevent
      # hatch from being confused by it
      - rm -rf /home/appveyor/.pyenv
      # install `uv`
      - curl -LsSf https://astral.sh/uv/install.sh | sh
      - source $HOME/.local/bin/env
      # Scratch space
      # we place the "unix" one into the user's HOME to avoid git-annex issues on MacOSX
      # gh-5291
      - mkdir ~/DLTMP && export TMPDIR=~/DLTMP

    before_test:
      # store original TMPDIR setting to limit modification to test execution
      - export PREV_TMPDIR=$TMPDIR
      # make TMPDIR a "crippled filesystem" to test wrong assumptions of POSIX-ness
      # on POSIX OSes. The test fixtures will create all test datasets under TMPDIR
      - |
        set -e
        if [ "$APPVEYOR_JOB_NAME" = "test-linux-crippled" ]; then
          # 200 MB VFAT FS in a box
          sudo dd if=/dev/zero of=/crippledfs.img count=200 bs=1M
          sudo mkfs.vfat /crippledfs.img
          sudo mkdir /crippledfs
          sudo mount -o "uid=$(id -u),gid=$(id -g)" /crippledfs.img /crippledfs
          echo "== mount >>"
          mount | grep crippled
          echo "<< mount =="
          export TMPDIR=/crippledfs
        fi
      - echo TMPDIR=$TMPDIR

    after_test:
      - coverage xml
      - codecovcli --auto-load-params-from AppVeyor upload-process -n "appveyor-${APPVEYOR_JOB_NAME}" --disable-search -f coverage.xml

    on_finish:
      # conditionally block the exit of a CI run for direct debugging
      - while [ -f ~/BLOCK ]; do sleep 5; done

  #
  # WINDOWS TEST RUNS
  #
  - matrix:
      only:
        - job_name: test-win
    cache:
      - "%UV_CACHE_DIR% -> .appveyor.yml"
      # hatch-managed python versions
      - "%HATCH_DATA_DIR%\\env\\virtual\\.pythons -> pyproject.toml"

    # init cannot use any components from the repo, because it runs prior to
    # cloning it
    init:
      # LOGIN: enable RDP access on windows (RDP password is in appveyor project config)
      # this is relatively expensive (1-2min), but very convenient to jump into any build at any time
      #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      - cmd: "set PATH=%CUSTOMPATH%"
      # install `uv`
      - cmd: powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
      # remove windows 260-char limit on path names
      - ps: Set-Itemproperty -path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name LongPathsEnabled -value 1
      # Scratch space
      - cmd: md C:\DLTMP
      # and use that scratch space to get short paths in test repos
      # (avoiding length-limits as much as possible)
      - cmd: "set TMP=C:\\DLTMP & set TEMP=C:\\DLTMP"

    install:
      # place a debug setup helper at a convenient location
      - cmd: copy tools\appveyor\env_setup.bat C:\\datalad_debug.bat

    after_test:
      - coverage xml
      - codecovcli --auto-load-params-from AppVeyor upload-process -n "appveyor-%APPVEYOR_JOB_NAME%" --disable-search -f coverage.xml

    on_finish:
      # conditionally block the exit of a CI run for direct debugging
      - ps: while ((Test-Path "C:\Users\\appveyor\\Desktop\\BLOCK.txt")) { Start-Sleep 5 }


#
# ALL TEST RUNS
#
build_script:
  - uv tool install hatch
  - uv tool install coverage[toml]
  - uv tool install codecov-cli

after_build:
  # Identity setup
  - git config --global user.email "test@appveyor.land"
  - git config --global user.name "Appveyor Almighty"

test_script:
  # oldest and newest supported, by default
  - "hatch test -i py=3.9,3.13 --cover --doctest-modules --durations 10"
